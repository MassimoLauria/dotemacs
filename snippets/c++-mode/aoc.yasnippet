# -*- mode: snippet -*-
# name: Template Advent of Code file
# key: * nokey
# --
/* -*- mode: C++; compile-command: "g++ -s -O3 `(file-name-nondirectory (buffer-file-name))` -o `(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`; ./`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`" -*- */

// Get the data
#include <iostream>
#include <sstream>
#include <fstream>

#include <vector>
#include <string>
//#include <unordered_set>
//#include <unordered_map>

/* utils.h provides
   - load_file_content: loads a text file into a string
   - get_all_integers: parses all integers in text into a vector<int>,
                       and ignores other non digit characters
   - splitlines: split text into lines, produces a vector<string>
   - splitlines: split text into tokens, produces a vector<string>
*/
#include "utils.h"


using namespace std;

// Data
string EXAMPLE {R"~(
)~"};

string INPUTFILE="input`(format-time-string "%d" (current-time))`.txt";


void part1(const string& text) {
    cout<<"part1"<<endl;
}

void part2(const string& text) {
    cout<<"part2"<<endl;
}

int main () {
    cout<<"Advent of code `(format-time-string "%Y day %d" (current-time))`"<<endl;

    // part1 - example data
    part1(EXAMPLE);

    // part1 - input file
    auto text = load_file_content(INPUTFILE);
    part1(text);

    // part2 - example data
    // part2(EXAMPLE);

    // part2 - input file
    // part2(text);

    return 0;
}
