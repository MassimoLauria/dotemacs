# -*- mode: snippet; require-final-newline: nil -*-
# name: Python doc string [Functions]
# key: docstring
# binding: direct-keybinding
# --
"""
${0:One line description.}

More information  about the functions, maybe  spanning multiple lines.
Let's still  stick to 70  columns anyway. We  can refer to  a variable
\`var\`  like  this,  or  use markups  like  *italics*,  **bold**  and
\`\`monospace\`\`      and      refer       to      some      function
:py:func:\`function_name\`.  It is  also possible  to use  math as  in
latex. For example there is  inline math :math:\`e^{-i \pi}\` and even
centered equations

.. math::

   \sum_{j \in \Gamma(i)} x_{i,j} \geq \frac{|\Gamma(i)|}{2}

A good reference for this type of documentation is [4]_, plus the Sphinx
extensions [5]_.

Parameters
----------
arg1 : type1
   Descritpion of arg1.
arg2 : type1, optional
   Description of arg2.

Returns
-------
result : result_type
   Description of the return value.

Raises
------
Exception1
   When event1 happens.
Exception2
   When event2 happens.


See Also
--------
a_related_symbol : description
another_related_symbol :description

Notes
-----
Uses so and so algorithm [1]_, see this reference [2]_ and download [3]_.

References
----------
.. [1] Name, "Title",
   Venue (YYYY), PAG-PAG.
.. [2] Name, "Title",
   Venue (YYYY), PAG-PAG.
.. [3] http://en.wikipedia.org/wiki/Eulerian_path
.. [4] https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt
.. [5] http://www.sphinx-doc.org/en/1.4.8/tutorial.html

Examples
--------
>>> 2+2
4
>>> [2]+[2]
[2, 2]
"""